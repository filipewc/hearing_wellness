name: CI

on:
  push:
    branches: [ main, master, eng/**, feat/**, ops/** ]
  pull_request:

jobs:
  tests-and-smoke:
    name: Unit tests + smoke (no Kaggle)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

      - name: Run unit tests
        run: pytest -q

      # Smoke PR: semeia um CSV mínimo para pular o download do Kaggle
      - name: Seed minimal raw CSV (PR smoke)
        if: github.event_name == 'pull_request'
        run: |
          python - << 'PY'
          import os, pandas as pd, pathlib
          raw = pathlib.Path('data/raw')
          raw.mkdir(parents=True, exist_ok=True)
          # Colunas reais observadas no dataset (inspector)
          cols = {
            "perceived_hearing_meaning": ["Staying connected with the world"],
            "hearing_fomo": ["Sometimes"],
            "hearing_test_barrier": ["Lack of awareness"],
            "missed_important_sounds": ["No, I usually hear things well"],
            "left_out_due_to_hearing": ["Never"],
            "daily_headphone_use": ["1-2 hours"],
            "belief_early_hearing_care": [5],
            "last_hearing_test_method": ["I've never taken a hearing test"],
            "interest_in_hearing_app": ["Maybe, if it's easy to use"],
            "desired_app_features": ["Quick tests"],
            "awareness_on_hearing_and_willingness_to_invest": ["Yes"],
            "paid_app_test_interest": ["Maybe, if it offers good value"],
            "age_group": ["18 - 24"],
            "ear_discomfort_after_use": ["No"],
          }
          df = pd.DataFrame(cols)
          df.to_csv(raw / "Hearing well-being Survey Report.csv", index=False)
          print("Seeded data/raw/Hearing well-being Survey Report.csv")
          PY

      - name: Run pipeline modules (PR smoke)
        if: github.event_name == 'pull_request'
        run: |
          python -m src.pipelines.bronze_ingest
          python -m src.pipelines.silver_clean
          python -m src.pipelines.silver_validate
          python -m src.pipelines.gold_build

      - name: Upload artifacts (PR smoke)
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: pr-smoke-artifacts
          path: |
            logs/**
            reports/**
            data/silver/**
            data/gold/**
          if-no-files-found: warn

  e2e-prefect:
    name: E2E Prefect (Kaggle)
    runs-on: ubuntu-latest
    needs: [tests-and-smoke]
    if: github.event_name == 'push' # só em pushes (ex.: merge na main)

    env:
      # Se você criar secrets (opcional): Settings → Secrets → Actions
      KAGGLE_USERNAME: ${{ secrets.KAGGLE_USERNAME }}
      KAGGLE_KEY: ${{ secrets.KAGGLE_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Prefect flow (E2E)
        run: python -m src.flow_prefect

      - name: Upload artifacts (E2E)
        uses: actions/upload-artifact@v4
        with:
          name: e2e-artifacts
          path: |
            logs/**
            reports/**
            data/gold/**
          if-no-files-found: warn
